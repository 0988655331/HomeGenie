[{
    Name: "jkUtils - SunCalc Twilight Widget",
    Author: "Jan Koch",
    Version: "v1.1 2014-03-29",

	GroupName : '',
	IconImage : 'pages/control/widgets/jkUtils/suncalc/images/noon.png',
    IconPath : 'pages/control/widgets/jkUtils/suncalc/images/',
	StatusText : '',
	Description : '',
	Initialized : false,
    WidgetPrefix : 'jkUtils.SunCalc.',
	DataUiFields : [ ],
	DataTimers : [ ],
	Widget : {},
	Container : '',

	InitView: function (cuid, module) {

		//console.log("CUID: "+cuid);
		this.Container = $(cuid),
		this.Widget = this.Container.find('[data-ui-field=widget]'),

        this.DataUiFields = this.GetDataFields( this.Widget, "data-ui-field", "jkUtils.SunCalc.", true, "^" );
        //console.log(this.DataUiFields);

		var displayedFields = this.DisplayDataFields(module, this.Widget, this.DataUiFields);
		var iconFields = this.GetDataFields( this.Widget.find('.settings .icons'), "data-locale-id", "jkUtils.SunCalc.", false, "^" );
		//console.log(iconFields);

		//-- Setup Timers for Status Icon
		this.SetupTimers(iconFields);

		//-- Display Module-Label If Set By User Config
		if(HG.WebApp.Utility.GetModulePropertyByName(module, "ConfigureOptions.jkUtils.SunCalc.Label").Value != "")
		  this.Widget.find('[data-ui-field="ConfigureOptions.jkUtils.SunCalc.Label"]').html(HG.WebApp.Utility.GetModulePropertyByName(module, "ConfigureOptions.jkUtils.SunCalc.Label").Value);

		//-- Enable This To Generate Variable-Set For Localization
		//HG.WebApp.Locales.GenerateTemplate();

		//-- Apply Localisation
		var userLang = window.navigator.userLanguage || window.navigator.language;
		HG.WebApp.Locales.Localize('./pages/control/widgets/jkUtils/suncalc/locales/' + userLang.toLowerCase().substring(0, 2) + '.json');

		this.Initialized = true;


	},

	RenderView: function (cuid, module) {

		if(!this.Initialized) this.InitView(cuid, module);

		//-- Set Label To Waxing/Waning For Moon Phase
		(HG.WebApp.Utility.GetModulePropertyByName(module, "jkUtils.SunCalc.Moon.Waxing").Value) ?
			this.Widget.find('[data-ui-field="jkUtils.SunCalc.Moon.Waxing"]').html(this.Widget.find('[data-locale-id="jkUtils.SunCalc.Moon.Waning"]').html()) :
			this.Widget.find('[data-ui-field="jkUtils.SunCalc.Moon.Waxing"]').html(this.Widget.find('[data-locale-id="jkUtils.SunCalc.Moon.Waxing"]').html());

		//-- Apply Defined Tooltips To Elements
		var tooltipFields = this.GetDataFields( this.Widget.find('.settings .tooltips'), "data-locale-id", "jkUtils.SunCalc.", false, "^" );

		console.log(tooltipFields);
		for(var i = 0; i < tooltipFields.length; i++) {
			//this.Widget.find('[data-ui-field="'+tooltipFields[i].substr(0,tooltipFields[i].lastIndexOf('.'))+'"]').html("TEST");
			this.Widget.find('[data-ui-field="'+tooltipFields[i].substr(0,tooltipFields[i].lastIndexOf('.'))+'"]').attr('title',this.Widget.find('[data-locale-id="'+tooltipFields[i]+'"]').html());
			//console.log(tooltipFields[i].substr(0,tooltipFields[i].lastIndexOf('.')));
		}

		//-- Call Update Status-Icon Function
		this.UpdateStatusIcon();

	},

	GetDataFields: function( input, attrib, selector, sorted, matcher ) {
		sorted = sorted || true;
		matcher = matcher || "";
		if(sorted)
			return input.find('['+attrib+matcher+'="'+selector+'"]').sort(function (a, b) {
								return ( $(a).attr(attrib) < $(b).attr(attrib)) ? -1 : 1;
							 }).map(function() {
								return $( this ).attr(attrib);
							 })
							.get();
		else
			return input.find('['+attr+matcher+'="'+selector+'"]').map(function() {
								return $( this ).attr(attrib);
							 })
							.get();
	},

	DisplayDataFields: function( module, widget,  dataFields ) {
		var displayedFields = new Array();

		for (var i = 0; i < dataFields.length; i++) {
			if(HG.WebApp.Utility.GetModulePropertyByName(module, dataFields[i])) {
				displayedFields[dataFields[i]] = HG.WebApp.Utility.GetModulePropertyByName(module, dataFields[i]).Value;
				this.Widget.find('[data-ui-field="'+ dataFields[i] +'"]').html( displayedFields[dataFields[i]] );
			}
		}

		return displayedFields;
	},

	SetupTimers: function( dataFields ) {

		var timer = '';

		for (var i = 0; i < dataFields.length; i++) {
				timer = this.Widget.find('[data-ui-field="'+ dataFields[i] +'"]').html();
				//console.log("Timer: "+timer);
				this.DataTimers.push({label: dataFields[i], time: this.ParseTime(timer), timeStr: timer});
		}

/*
		for (var key in dataFields) {

			if( /jkUtils\.SunCalc\.Evening\..+/i.test(key) ||
			    /jkUtils\.SunCalc\.Morning\..+/i.test(key) ||
				/jkUtils\.SunCalc\.Day\..+/i.test(key) ) {  // ||	/jkUtils\.SunCalc\.Night\..+/i.test(key) )  // manually set to 00:00 afterwards

				this.DataTimers.push({label: key, time: this.ParseTime(dataFields[key]), timeStr: dataFields[key]});

			}
		}
*/
		this.DataTimers.unshift({label: "jkUtils.SunCalc.Evening.Night.Start", time: this.ParseTime("00:00"), timeStr: ""});

		//var timerLabels = this.GetDataFields( widget, "data-ui-field", "jkUtils.SunCalc.", true, "^" );

		this.DataTimers.sort(function (date1, date2) {
			return (date1.time < date2.time) ? -1 : 1;
		});

		//console.log(this.DataTimers);

	},

	ParseTime: function(timestring) {
		var d = new Date();
		var time = timestring.match(/(\d+)(?::(\d\d))?\s*(p?)/);
		d.setHours( parseInt(time[1]) + (time[3] ? 12 : 0) );
		d.setMinutes( parseInt(time[2]) || 0 );

		return d;
	},

	UpdateStatusIcon: function() {
		var now = new Date();
		var currentTime = 0,
		    icon;

		for (var i = 0; i < this.DataTimers.length; i++)
		  if (now > this.DataTimers[i].time) currentTime = i;

		this.Widget.find('#jkUtils_SunCalc_Current_Label').html(this.Widget.find('[data-locale-id="'+ this.DataTimers[currentTime].label + '"]').html());

		if(this.DataTimers[currentTime+1] && this.DataTimers[currentTime+1].timeStr != "") {
			this.Widget.find('#jkUtils_SunCalc_Current_Till').html(this.DataTimers[currentTime+1].timeStr);
			this.Widget.find('#jkUtils_SunCalc_iconlabel .time').show();
		} else {
			this.Widget.find('#jkUtils_SunCalc_iconlabel .time').hide();
		}

		icon = this.DataTimers[currentTime].label.replace(new RegExp(this.WidgetPrefix,'g'),'');
		icon = this.IconPath + icon.substr(0,icon.lastIndexOf('.')) + ".png";
		this.Widget.find('[data-ui-field=icon]').attr('src',icon);

		return true;
	}

}]