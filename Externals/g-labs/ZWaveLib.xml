<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZWaveLib</name>
    </assembly>
    <members>
        <member name="M:ZWaveLib.ICommandClass.GetClassId">
            <summary>
            Returns Id of Command class
            </summary>
            <returns>command class Id</returns></member>
        <member name="M:ZWaveLib.ICommandClass.GetEvent(ZWaveLib.ZWaveNode,System.Byte[])">
            <summary>Processes the message and returns corresponding ZWaveEvent</summary>
            <param name="node">the Node triggered the command</param>
            <param name="message">command part of ZWave message (without headers and checksum)</param>
            <returns></returns></member>
        <member name="P:ZWaveLib.ZWaveNode.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value></member>
        <member name="P:ZWaveLib.ZWaveNode.ManufacturerSpecific">
            <summary>
            Gets or sets the manufacturer specific.
            </summary>
            <value>The manufacturer specific.</value></member>
        <member name="P:ZWaveLib.ZWaveNode.BasicClass">
            <summary>
            Gets or sets the basic class.
            </summary>
            <value>The basic class.</value></member>
        <member name="P:ZWaveLib.ZWaveNode.GenericClass">
            <summary>
            Gets or sets the generic class.
            </summary>
            <value>The generic class.</value></member>
        <member name="P:ZWaveLib.ZWaveNode.SpecificClass">
            <summary>
            Gets or sets the specific class.
            </summary>
            <value>The specific class.</value></member>
        <member name="P:ZWaveLib.ZWaveNode.NodeInformationFrame">
            <summary>
            Gets or sets the node information frame.
            </summary>
            <value>The node information frame.</value></member>
        <member name="P:ZWaveLib.ZWaveNode.SecuredNodeInformationFrame">
            <summary>
            Gets or sets the secured node information frame.
            </summary>
            <value>The secured node information frame.</value></member>
        <member name="P:ZWaveLib.ZWaveNode.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value></member>
        <member name="T:ZWaveLib.ZWaveNode.NodeUpdatedEventHandler">
            <summary>
            Node updated event handler.
            </summary></member>
        <member name="E:ZWaveLib.ZWaveNode.NodeUpdated">
            <summary>
            Occurs when node is updated.
            </summary></member>
        <member name="P:ZWaveLib.ZWaveNode.CommandClassVersions">
            <summary>
            Dictionary mapping supported command classes to versions.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveNode.#ctor(ZWaveLib.ZWaveController,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveNode" /> class.
            </summary>
            <param name="controller">Controller.</param>
            <param name="nodeId">Node identifier.</param></member>
        <member name="M:ZWaveLib.ZWaveNode.#ctor(ZWaveLib.ZWaveController,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveNode" /> class.
            </summary>
            <param name="controller">Controller.</param>
            <param name="nodeId">Node identifier.</param>
            <param name="genericType">Generic type.</param></member>
        <member name="P:ZWaveLib.ZWaveNode.SupportedCommandClasses">
            <summary>
            Gets the supported command classes.
            </summary>
            <value>The supported command classes.</value></member>
        <member name="M:ZWaveLib.ZWaveNode.SupportCommandClass(ZWaveLib.CommandClass)">
            <summary>
            Supports the command class.
            </summary>
            <returns><c>true</c>, if command class is supported, <c>false</c> otherwise.</returns>
            <param name="commandClass">Command Class</param></member>
        <member name="M:ZWaveLib.ZWaveNode.IsSecuredCommandClass(ZWaveLib.CommandClass)">
            <summary>
            Determines whether this instance command class specified by c is secured.
            </summary>
            <returns><c>true</c> true if is secured command class; otherwise, <c>false</c>.</returns>
            <param name="commandClass">Command Class.</param></member>
        <member name="M:ZWaveLib.ZWaveNode.GetCmdClassVersion(ZWaveLib.CommandClass)">
            <summary>
            Determines the version of the specified command class.
            </summary>
            <returns>The command class version, or 0 if it is not found.</returns>
            <param name="cmdClass">Command class to query</param></member>
        <member name="M:ZWaveLib.ZWaveNode.SendDataRequest(System.Byte[])">
            <summary>
            Sends the data request.
            </summary>
            <param name="request">Request.</param></member>
        <member name="T:ZWaveLib.Values.ZWaveAlarmDetailType">
            <summary>
            Enumerator for alarm value details. e.g., 0x16 corresponds with the action of
            an open door if the alarm AccessControl alarm type is set.
            </summary></member>
        <member name="T:ZWaveLib.CommandClasses.ZWaveSensorBinaryParameter">
            <summary>
            Enumerator for possible sensor binary parameters (only reported for v2)
            </summary></member>
        <member name="F:ZWaveLib.Command.SensorMultilevelReport">
            <summary>
            0x05
            </summary></member>
        <member name="F:ZWaveLib.Command.MultiInstanceSet">
            <summary>
            0x01
            </summary></member>
        <member name="F:ZWaveLib.Command.MultiInstanceGet">
            <summary>
            0x02
            </summary></member>
        <member name="F:ZWaveLib.Command.MultiInstanceCountGet">
            <summary>
            0x04
            </summary></member>
        <member name="F:ZWaveLib.Command.MultiInstanceCountReport">
            <summary>
            0x05
            </summary></member>
        <member name="F:ZWaveLib.Command.MultiInstanceEncapsulated">
            <summary>
            0x06
            </summary></member>
        <member name="F:ZWaveLib.Command.MultiChannelEncapsulated">
            <summary>
            0x0D
            </summary></member>
        <member name="T:ZWaveLib.ZWaveController">
            <summary>
            Z-Wave Controller.
            </summary></member>
        <member name="T:ZWaveLib.ZWaveController.ControllerStatusChangedEventHandler">
            <summary>
            Controller status changed event handler.
            </summary></member>
        <member name="E:ZWaveLib.ZWaveController.ControllerStatusChanged">
            <summary>
            Occurs when controller status changed.
            </summary></member>
        <member name="T:ZWaveLib.ZWaveController.DiscoveryProgressEventHandler">
            <summary>
            Discovery progress event handler.
            </summary></member>
        <member name="E:ZWaveLib.ZWaveController.DiscoveryProgress">
            <summary>
            Occurs during discovery process.
            </summary></member>
        <member name="T:ZWaveLib.ZWaveController.NodeOperationProgressEventHandler">
            <summary>
            Node operation progress event handler.
            </summary></member>
        <member name="E:ZWaveLib.ZWaveController.NodeOperationProgress">
            <summary>
            Occurs when a node operation is taking place.
            </summary></member>
        <member name="T:ZWaveLib.ZWaveController.NodeUpdatedEventHandler">
            <summary>
            Node updated event handler.
            </summary></member>
        <member name="E:ZWaveLib.ZWaveController.NodeUpdated">
            <summary>
            Occurs when node data is updated.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveController" /> class.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveController.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveController" /> class.
            </summary>
            <param name="portName">Port name.</param></member>
        <member name="M:ZWaveLib.ZWaveController.Connect">
            <summary>
            Connect this instance.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveController.Disconnect">
            <summary>
            Disconnect this instance.
            </summary></member>
        <member name="P:ZWaveLib.ZWaveController.PortName">
            <summary>
            Gets or sets the name of the serial port.
            </summary>
            <value>The name of the port.</value></member>
        <member name="P:ZWaveLib.ZWaveController.Status">
            <summary>
            Gets the status.
            </summary>
            <value>The status.</value></member>
        <member name="M:ZWaveLib.ZWaveController.QueueMessage(ZWaveLib.ZWaveMessage)">
            <summary>
            Queues the message.
            </summary>
            <returns>The message.</returns>
            <param name="message">Message.</param></member>
        <member name="M:ZWaveLib.ZWaveController.SendMessage(ZWaveLib.ZWaveMessage)">
            <summary>
            Sends the message.
            </summary>
            <returns>The message.</returns>
            <param name="message">Message.</param></member>
        <member name="M:ZWaveLib.ZWaveController.SoftReset">
            <summary>
            SoftReset the controller.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveController.HardReset">
            <summary>
            HardReset the controller.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveController.Initialize">
            <summary>
            Initialize the controller (get the node list).
            </summary></member>
        <member name="M:ZWaveLib.ZWaveController.Discovery">
            <summary>
            Query capabilities, Supported Classes and Manufacturer Specific of each node.
            </summary></member>
        <member name="M:ZWaveLib.ZWaveController.GetNodeInformationFrame(System.Byte)">
            <summary>
            Gets the node information frame.
            </summary>
            <param name="nodeId">Node identifier.</param></member>
        <member name="M:ZWaveLib.ZWaveController.GetNodeProtocolInfo(System.Byte)">
            <summary>
            Gets the node protocol info.
            </summary>
            <param name="nodeId">Node identifier.</param></member>
        <member name="M:ZWaveLib.ZWaveController.GetNode(System.Byte)">
            <summary>
            Gets the node.
            </summary>
            <returns>The node.</returns>
            <param name="nodeId">Node identifier.</param></member>
        <member name="P:ZWaveLib.ZWaveController.Nodes">
            <summary>
            Gets the nodes.
            </summary>
            <value>The nodes.</value></member>
        <member name="M:ZWaveLib.ZWaveController.BeginNodeAdd">
            <summary>
            Begins the node add.
            </summary>
            <returns>A reference to the ZWaveMessage of this request.</returns>
            <returns>The node add.</returns></member>
        <member name="M:ZWaveLib.ZWaveController.StopNodeAdd">
            <summary>
            Stops the node add.
            </summary>
            <returns>A reference to the ZWaveMessage of this request.</returns>
            <returns>The node add.</returns></member>
        <member name="M:ZWaveLib.ZWaveController.BeginNodeRemove">
            <summary>
            Begins the node remove.
            </summary>
            <returns>A reference to the ZWaveMessage of this request.</returns>
            <returns>The node remove.</returns></member>
        <member name="M:ZWaveLib.ZWaveController.StopNodeRemove">
            <summary>
            Stops the node remove.
            </summary>
            <returns>A reference to the ZWaveMessage of this request.</returns>
            <returns>The node remove.</returns></member>
        <member name="M:ZWaveLib.ZWaveController.RequestNeighborsUpdateOptions(System.Byte)">
            <summary>
            Requests the neighbors options update.
            </summary>
            <returns>A reference to the ZWaveMessage of this request.</returns>
            <param name="nodeId">Node identifier.</param></member>
        <member name="M:ZWaveLib.ZWaveController.RequestNeighborsUpdate(System.Byte)">
            <summary>
            Requests the neighbors update.
            </summary>
            <returns>A reference to the ZWaveMessage of this request.</returns>
            <param name="nodeId">Node identifier.</param></member>
        <member name="M:ZWaveLib.ZWaveController.GetNeighborsRoutingInfo(System.Byte)">
            <summary>
            Gets the neighbors routing info.
            </summary>
            <returns>A reference to the ZWaveMessage of this request.</returns>
            <param name="nodeId">Node identifier.</param></member>
        <member name="M:ZWaveLib.ZWaveController.SetQueryStage(ZWaveLib.QueryStage)">
            <summary>
            Sets the query stage.
            </summary>
            <param name="stage">Stage.</param></member>
        <member name="M:ZWaveLib.ZWaveController.UpdateQueryStage(ZWaveLib.ZWaveMessage)">
            <summary>
            Updates the query stage.
            </summary>
            <param name="zm">Zm.</param></member>
        <member name="M:ZWaveLib.ZWaveController.ProcessMessage(ZWaveLib.ZWaveMessage)">
            <summary>
            Processes a ZWave message.
            </summary>
            <param name="zm">Zm.</param></member>
        <member name="M:ZWaveLib.ZWaveController.ParseSerialData(System.Byte[])">
            <summary>
            Parses the data buffer coming from the serial port.
            </summary>
            <param name="message">raw bytes data.</param></member>
        <member name="M:ZWaveLib.ZWaveController.OnNodeUpdated(ZWaveLib.NodeUpdatedEventArgs)">
            <summary>
            Raises the node updated event.
            </summary>
            <param name="args">Arguments.</param></member>
        <member name="M:ZWaveLib.ZWaveController.OnDiscoveryProgress(ZWaveLib.DiscoveryProgressEventArgs)">
            <summary>
            Raises the discovery progress event.
            </summary>
            <param name="args">Arguments.</param></member>
        <member name="M:ZWaveLib.ZWaveController.OnNodeOperationProgress(ZWaveLib.NodeOperationProgressEventArgs)">
            <summary>
            Raises the node operation progress event.
            </summary>
            <param name="args">Arguments.</param></member>
        <member name="M:ZWaveLib.ZWaveController.OnControllerStatusChanged(ZWaveLib.ControllerStatusEventArgs)">
            <summary>
            Raises the controller status changed event.
            </summary>
            <param name="args">Arguments.</param></member>
        <member name="T:ZWaveLib.ZWaveNodeConfig">
            <summary>
            Z wave node config.
            </summary></member>
        <member name="P:ZWaveLib.ZWaveNodeConfig.NodeId">
            <summary>
            Gets or sets the node identifier.
            </summary>
            <value>The node identifier.</value></member>
        <member name="P:ZWaveLib.ZWaveNodeConfig.NodeInformationFrame">
            <summary>
            Gets or sets the node information frame.
            </summary>
            <value>The node information frame.</value></member>
        <member name="P:ZWaveLib.ZWaveNodeConfig.SecuredNodeInformationFrame">
            <summary>
            Gets or sets the secured node information frame.
            </summary>
            <value>The secured node information frame.</value></member>
        <member name="P:ZWaveLib.ZWaveNodeConfig.DevicePrivateNetworkKey">
            <summary>
            Gets or sets the device private network key.
            </summary>
            <value>The device private network key.</value></member>
        <member name="P:ZWaveLib.ZWaveNodeConfig.CommandClassVersions">
            <summary>
            Gets or sets the command class versions.
            </summary>
            <value>The command class versions.</value></member>
    </members>
</doc>
